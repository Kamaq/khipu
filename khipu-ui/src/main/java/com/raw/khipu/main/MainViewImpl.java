package com.raw.khipu.main;

import java.io.File;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.raw.khipu.KhipuAppUI;
import com.raw.khipu.form.FormFacade;
import com.raw.khipu.i18n.AppMessages;
import com.raw.khipu.menu.MenuModel;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.navigator.View;
import com.vaadin.navigator.ViewChangeListener.ViewChangeEvent;
import com.vaadin.server.FileResource;
import com.vaadin.server.VaadinService;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.CustomLayout;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.HorizontalSplitPanel;
import com.vaadin.ui.Image;
import com.vaadin.ui.Label;
import com.vaadin.ui.UI;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window;
import com.vaadin.ui.themes.Reindeer;

public class MainViewImpl extends CustomComponent implements MainView, ClickListener, View {

  private static final long serialVersionUID = -133622506780410875L;

  @AutoGenerated
  private CustomLayout mainLayout;
  private KhipuAppUI app;
  private Window subwindow;
  private CustomComponent form;
  private CustomComponent sideBar;
  private VerticalLayout formContainer;
  private HorizontalSplitPanel hPanel;

  public MainViewImpl(KhipuAppUI _app) throws Exception {
    this.app = _app;
    buildMainLayout();
    setCompositionRoot(mainLayout);
  }

  @AutoGenerated
  private void buildMainLayout() throws Exception {
    mainLayout = new CustomLayout("StartLayout");
    String imagePath = "/WEB-INF/images/icons/";
    String basepath = VaadinService.getCurrent().getBaseDirectory().getAbsolutePath();

    // Top Page
    Image logoApp = (Image) app.getAppLogo();
    logoApp.setWidth("120px");
    logoApp.setHeight("50px");

    // Tool Bar
    GridLayout toolBarLayout = new GridLayout(5, 2);

    Button btnMenu = new Button(null, this);
    btnMenu.setData("btnMenu");
    btnMenu.setIcon(new FileResource(new File(basepath + imagePath + "menu.svg")));
    btnMenu.setStyleName(Reindeer.BUTTON_LINK);
    btnMenu.setDescription(app.getMessageLocale(AppMessages.AppToolBarMenu));
    Label lblMenu = new Label(app.getMessageLocale(AppMessages.AppToolBarMenu));
    lblMenu.setStyleName("raw-toolbar-option");

    Button btnHome = new Button(null, this);
    btnHome.setData("btnHome");
    btnHome.setIcon(new FileResource(new File(basepath + imagePath + "home.svg")));
    btnHome.setStyleName(Reindeer.BUTTON_LINK);
    btnHome.setDescription(app.getMessageLocale(AppMessages.AppToolBarHome));
    Label lblHome = new Label(app.getMessageLocale(AppMessages.AppToolBarHome));
    lblHome.setStyleName("raw-toolbar-option");

    Button btnFind = new Button(null, this);
    btnFind.setData("btnFind");
    btnFind.setIcon(new FileResource(new File(basepath + imagePath + "magnifying-glass.svg")));
    btnFind.setStyleName(Reindeer.BUTTON_LINK);
    btnFind.setDescription(app.getMessageLocale(AppMessages.AppToolBarFind));
    Label lblFind = new Label(app.getMessageLocale(AppMessages.AppToolBarFind));
    lblFind.setStyleName("raw-toolbar-option");

    Button btnConfig = new Button(null, this);
    btnConfig.setData("btnConfig");
    btnConfig.setIcon(new FileResource(new File(basepath + imagePath + "wrench.svg")));
    btnConfig.setStyleName(Reindeer.BUTTON_LINK);
    btnConfig.setDescription(app.getMessageLocale(AppMessages.AppToolBarConfig));
    Label lblConfig = new Label(app.getMessageLocale(AppMessages.AppToolBarConfig));
    lblConfig.setStyleName("raw-toolbar-option");

    Button btnMessages = new Button(null, this);
    btnMessages.setData("btnMessages");
    btnMessages.setIcon(new FileResource(new File(basepath + imagePath + "envelope-closed.svg")));
    btnMessages.setStyleName(Reindeer.BUTTON_LINK);
    btnMessages.setDescription(app.getMessageLocale(AppMessages.AppToolBarMessages));
    Label lblMessages = new Label(app.getMessageLocale(AppMessages.AppToolBarMessages));
    lblMessages.setStyleName("raw-toolbar-option");

    toolBarLayout.addComponent(btnMenu);
    toolBarLayout.setComponentAlignment(btnMenu, Alignment.MIDDLE_CENTER);
    toolBarLayout.addComponent(btnHome);
    toolBarLayout.setComponentAlignment(btnHome, Alignment.MIDDLE_CENTER);
    toolBarLayout.addComponent(btnFind);
    toolBarLayout.setComponentAlignment(btnFind, Alignment.MIDDLE_CENTER);
    toolBarLayout.addComponent(btnConfig);
    toolBarLayout.setComponentAlignment(btnConfig, Alignment.MIDDLE_CENTER);
    toolBarLayout.addComponent(btnMessages);
    toolBarLayout.setComponentAlignment(btnMessages, Alignment.MIDDLE_CENTER);
    toolBarLayout.addComponent(lblMenu);
    toolBarLayout.setComponentAlignment(lblMenu, Alignment.MIDDLE_CENTER);
    toolBarLayout.addComponent(lblHome);
    toolBarLayout.setComponentAlignment(lblHome, Alignment.MIDDLE_CENTER);
    toolBarLayout.addComponent(lblFind);
    toolBarLayout.setComponentAlignment(lblFind, Alignment.MIDDLE_CENTER);
    toolBarLayout.addComponent(lblConfig);
    toolBarLayout.setComponentAlignment(lblConfig, Alignment.MIDDLE_CENTER);
    toolBarLayout.addComponent(lblMessages);
    toolBarLayout.setComponentAlignment(lblMessages, Alignment.MIDDLE_CENTER);

    toolBarLayout.getComponent(0, 0).setWidth("30%");
    toolBarLayout.getComponent(1, 0).setWidth("30%");
    toolBarLayout.getComponent(2, 0).setWidth("30%");
    toolBarLayout.getComponent(3, 0).setWidth("30%");
    toolBarLayout.getComponent(4, 0).setWidth("30%");
    toolBarLayout.setSpacing(true);

    // Top Right Layout
    HorizontalLayout topRightLayout = new HorizontalLayout();
    Label lblWelcome = new Label(app.getMessageLocale(AppMessages.AppWelcome));
    lblWelcome.setSizeUndefined();
    lblWelcome.setStyleName("raw-toolbar-option");
    Label lblUserInfo = new Label(app.getRegisteredUser().getEmail().trim());
    lblUserInfo.setSizeUndefined();
    lblUserInfo.setStyleName("raw-toolbar-option");

    Button btnPerfil = new Button(null, this);
    btnPerfil.setData("btnPerfil");
    btnPerfil.setIcon(new FileResource(new File(basepath + imagePath + "person16x16.svg")));
    btnPerfil.setStyleName(Reindeer.BUTTON_LINK);
    btnPerfil.setDescription(app.getMessageLocale(AppMessages.AppToolBarPerfil));

    // topRightLayout.addComponent(lblWelcome);
    // topRightLayout.addComponent(new Label(""));
    topRightLayout.addComponent(lblUserInfo);
    topRightLayout.setComponentAlignment(lblUserInfo, Alignment.MIDDLE_CENTER);
    topRightLayout.addComponent(btnPerfil);
    topRightLayout.setComponentAlignment(btnPerfil, Alignment.MIDDLE_CENTER);
    topRightLayout.setSpacing(true);

    // Center Page
    hPanel = new HorizontalSplitPanel();
    formContainer = new VerticalLayout();
    // formContainer.setStyleName("backColor");
    formContainer.setImmediate(true);

    // Start Side Bar
    SideBarModel sideBarModel = new SideBarModel();
    sideBarModel.addProperty("User", app.getRegisteredUser().getName());
    sideBarModel.addProperty("Email", app.getRegisteredUser().getEmail());
    sideBar = new SideBarViewImpl();
    ((SideBarViewImpl) sideBar).setModelSideBar(sideBarModel);
    ((SideBarViewImpl) sideBar).setApp(app);
    ((SideBarViewImpl) sideBar).populate();

    hPanel.removeAllComponents();
    hPanel.addComponent(formContainer);
    hPanel.addComponent(sideBar);
    hPanel.setSizeUndefined();
    hPanel.setImmediate(true);
    hPanel.setWidth("100%");
    hPanel.setHeight("100%");
    hPanel.setSplitPosition(80);

    // Bottom Page
    HorizontalLayout bottom = new HorizontalLayout();
    bottom.setImmediate(true);
    bottom.setSizeFull();
    Label lblLeyenda = new Label("Â©2014 Khipu, a RAW application. All rigths reserved.");
    // lblLeyenda.setStyleName("grayLabel");
    bottom.addComponent(lblLeyenda);

    mainLayout.addComponent(logoApp, "topLeftPage");
    mainLayout.addComponent(toolBarLayout, "topCenterPage");
    mainLayout.addComponent(topRightLayout, "topRightPage");
    mainLayout.addComponent(hPanel, "centerPage");
    mainLayout.addComponent(bottom, "bottomPage");

    mainLayout.setSizeFull();
    mainLayout.setImmediate(true);

    setSizeFull();
    setImmediate(true);
  }

  List<StartViewListener> listeners = new ArrayList<StartViewListener>();

  @Override
  public void addListener(StartViewListener listener) {
    listeners.add(listener);
  }

  @Override
  public void buttonClick(ClickEvent event) {
    for (StartViewListener listener : listeners) {
      listener.buttonClick(event.getButton().getData().toString());
    }
  }

  public CustomComponent getForm() {
    return form;
  }

  @Override
  public VerticalLayout getFormContainer() {
    return formContainer;
  }

  @Override
  public void setForm(CustomComponent _form) {
    this.form = _form;

    formContainer.removeAllComponents();
    formContainer.addComponent(_form);
    hPanel.removeAllComponents();
    hPanel.addComponent(formContainer);
    hPanel.addComponent(sideBar);
  }

  @Override
  public void addForm(CustomComponent _form) {
    // Add form if not exists
    if (formContainer.getComponentIndex(_form) < 0) {
      formContainer.addComponent(_form);
    }
  }

  @Override
  public void setWindow(Window window) {
    this.subwindow = window;

    if (this.subwindow.getParent() == null) {
      getUI();
      UI.getCurrent().addWindow(this.subwindow);
      this.subwindow.center();
    }
  }

  @Override
  public KhipuAppUI getUIApp() {
    return this.app;
  }

  public CustomComponent loadForm(String formClassName, Map<String, Object> formParams) {
    CustomComponent loadedForm = null;
    try {
      MenuModel mm = new MenuModel();

      // Register current form in object app
      getUIApp().setCurrentFormComponent(mm.getComponent(formClassName));

      // Load form class dinamically
      Class classFormFacade = Class.forName("com.raw.khipu." + formClassName);
      Method methodGetInstance = classFormFacade.getDeclaredMethod("getInstance", new Class[] {
          KhipuAppUI.class, Map.class });
      FormFacade formFacade = (FormFacade) methodGetInstance.invoke(classFormFacade, new Object[] {
          getUIApp(), formParams });

      loadedForm = formFacade.getForm(null);

    } catch (ClassNotFoundException e) {
      System.out.println(e);
    } catch (IllegalAccessException e) {
      e.printStackTrace();
    } catch (IllegalArgumentException e) {
      e.printStackTrace();
    } catch (InvocationTargetException e) {
      e.printStackTrace();
    } catch (NoSuchMethodException e) {
      e.printStackTrace();
    } catch (SecurityException e) {
      e.printStackTrace();
    } catch (Exception e) {
      e.printStackTrace();
    }
    return loadedForm;
  }

  @Override
  public void enter(ViewChangeEvent event) {
    if (event.getParameters() == null || event.getParameters().isEmpty()) {
      setForm(new CustomComponent());
      return;
    }
    List<String> params = new ArrayList<String>(Arrays.asList(event.getParameters().toString()
        .split("/")));
    String paramFormClassName = params.get(0);

    Map<String, Object> formParams = new HashMap<String, Object>();
    try {
      openForm(paramFormClassName, formParams, event.getParameters().toString(), true);
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  @Override
  public CustomComponent openForm(String formClassName, Map<String, Object> formParams,
      String viewParams, boolean truncateForm) throws Exception {
    CustomComponent resultForm = null;
    CustomComponent newForm;

    // If paramViews isnot empty, is because the call was from View and ActivateFormCache must be
    // false
    if (viewParams != null) {

      // get parameters from Navigation View
      List<String> params = new ArrayList<String>(Arrays.asList(viewParams.split("/")));
      String paramFormClassName = params.get(0);
      String paramActiveCache = "";
      if (params.size() > 1) {
        paramActiveCache = params.get(1);
      }

      // Verify if form exist in cache list
      CustomComponent formInCache = (CustomComponent) app
          .getFormFromNavigationMap(paramFormClassName);

      // if it exists, open from cache
      if (formInCache != null) {
        if (truncateForm) {
          resultForm = formInCache;
          setForm(formInCache);
        } else {
          resultForm = formInCache;
          addForm(formInCache);
        }
      } else { // If form not exists in cache, open it as new

        // Load form class dinamically
        newForm = loadForm(formClassName, formParams);
        if (truncateForm) {
          resultForm = newForm;
          setForm(newForm);
        } else {
          resultForm = newForm;
          addForm(newForm);
        }

        // add new form in cache
        if (paramActiveCache.equalsIgnoreCase("c")) {
          app.addFormToNavigationMap(paramFormClassName, newForm);
        }
      }

    } else { // The call from another form or from menu

      // If ActivateFormCache = false, then
      if (!app.isActivateFormCache()) {
        // Load form class dinamically
        newForm = loadForm(formClassName, formParams);
        if (truncateForm) {
          resultForm = newForm;
          setForm(newForm);
        } else {
          resultForm = newForm;
          addForm(newForm);
        }

      } else {
        // Call form through de Navigator View adding cache parameter
        getUIApp().getNavigator().navigateTo(KhipuAppUI.MAINVIEW + "/" + formClassName + "/c");
      }
    }
    return resultForm;
  }

}