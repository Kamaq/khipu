package com.raw.khipu.mail;

import java.util.ArrayList;
import java.util.List;

import com.raw.khipu.KhipuAppUI;
import com.raw.khipu.dto.Property;
import com.raw.khipu.form.DialogBox;
import com.raw.khipu.form.DialogBox.ConfirmListener;
import com.raw.khipu.i18n.AppMessages;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.util.BeanItem;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.server.FontAwesome;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.RichTextArea;
import com.vaadin.ui.Table;
import com.vaadin.ui.Table.ColumnGenerator;
import com.vaadin.ui.Table.ColumnHeaderMode;
import com.vaadin.ui.TextField;
import com.vaadin.ui.UI;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window;
import com.vaadin.ui.themes.Reindeer;

public class MailViewImpl extends CustomComponent implements MailView, ClickListener {
  private static final long serialVersionUID = 2185643328823004308L;

  @AutoGenerated
  private KhipuAppUI app;
  private MailModel mailModel;
  private Window subwindow;
  private int recipientsByTable = 3;
  private int attachmentsByTable = 3;
  private String itemWidth = "98%";
  private String buttonWidth = "100px";
  private Table attachments = new Table("Attachments");
  private TextField emailTo = new TextField("To");
  private Button btnAddMailTo = new Button("Add Mail", this);
  private Table recipients = new Table("Recipients");
  private TextField subject = new TextField("Subject");
  private RichTextArea message = new RichTextArea("Message");
  private Button btnSend = new Button("Send", this);
  private Button btnCancel = new Button("Cancel", this);

  public MailViewImpl() {
    subwindow = new Window();
    subwindow.setCaption("Send by e-mail");
    subwindow.setModal(true);
    subwindow.setWidth("75%");
    subwindow.setHeight("80%");

    VerticalLayout formLayout = new VerticalLayout();
    HorizontalLayout toLayout = new HorizontalLayout();
    btnAddMailTo.setData("btnAddMailTo");
    btnAddMailTo.setWidth("95%");
    toLayout.setWidth(itemWidth);
    toLayout.addComponent(emailTo);
    toLayout.setExpandRatio(emailTo, 3);
    toLayout.setComponentAlignment(emailTo, Alignment.BOTTOM_LEFT);
    toLayout.addComponent(btnAddMailTo);
    toLayout.setExpandRatio(btnAddMailTo, 1);
    toLayout.setComponentAlignment(btnAddMailTo, Alignment.BOTTOM_RIGHT);
    toLayout.setSizeFull();

    HorizontalLayout toolbar = new HorizontalLayout();
    toolbar.setSpacing(true);
    toolbar.addComponent(btnSend);
    toolbar.addComponent(btnCancel);

    attachments.setPageLength(attachmentsByTable);
    attachments.setWidth(itemWidth);
    attachments.setSelectable(true);
    attachments.setImmediate(true);
    attachments.setIcon(FontAwesome.PAPERCLIP);
    attachments.setColumnHeaderMode(ColumnHeaderMode.HIDDEN);

    recipients.setPageLength(recipientsByTable);
    recipients.setWidth(itemWidth);
    recipients.setSelectable(true);
    recipients.setImmediate(true);
    recipients.setIcon(FontAwesome.CHILD);
    recipients.setColumnHeaderMode(ColumnHeaderMode.HIDDEN);

    emailTo.setWidth(itemWidth);
    emailTo.setCursorPosition(1);
    emailTo.addStyleName("inline-icon");
    emailTo.setIcon(FontAwesome.ENVELOPE);
    subject.setWidth(itemWidth);
    message.setWidth("99%");
    message.setHeight(itemWidth);
    btnSend.setWidth(buttonWidth);
    btnSend.setData("btnSend");
    btnSend.setIcon(FontAwesome.SEND);
    btnCancel.setWidth(buttonWidth);
    btnCancel.setData("btnCancel");

    HorizontalLayout topLayout = new HorizontalLayout();
    VerticalLayout recipientsLayout = new VerticalLayout();
    recipientsLayout.addComponent(toLayout);
    recipientsLayout.addComponent(recipients);
    recipientsLayout.setWidth("100%");
    VerticalLayout attachmentLayout = new VerticalLayout();
    attachmentLayout.addComponent(subject);
    attachmentLayout.addComponent(attachments);
    attachmentLayout.setWidth("100%");
    topLayout.addComponent(attachmentLayout);
    topLayout.addComponent(recipientsLayout);
    topLayout.setSizeFull();

    formLayout.addComponent(topLayout);
    formLayout.setExpandRatio(topLayout, 3);
    formLayout.addComponent(message);
    formLayout.setExpandRatio(message, 4);
    formLayout.addComponent(toolbar);
    formLayout.setExpandRatio(toolbar, 1);

    formLayout.setMargin(true);
    formLayout.setSizeFull();
    subwindow.setContent(formLayout);

  }

  @AutoGenerated
  public Window buildMainLayout() {
    return subwindow;
  }

  public void init() {

    attachments.addGeneratedColumn("btnDelete", new ColumnGenerator() {
      private static final long serialVersionUID = -3681945779247452698L;

      @Override
      public Object generateCell(final Table source, final Object itemId, Object columnId) {
        Button btn = new Button();
        btn.setIcon(FontAwesome.TIMES);
        btn.setStyleName(Reindeer.BUTTON_LINK);
        btn.setDescription(app.getMessageLocale(AppMessages.btnDelFromListPrompt));
        btn.addClickListener(new ClickListener() {
          private static final long serialVersionUID = -4987350697253652160L;

          @Override
          public void buttonClick(ClickEvent event) {
            Object p = ((BeanItem) source.getItem(itemId)).getBean();
            mailModel.removeAttachment(((Property) p).getId());

            source.removeItem(itemId);
          }
        });
        return btn;
      }
    });

    recipients.addGeneratedColumn("btnDelete", new ColumnGenerator() {
      private static final long serialVersionUID = -3681945779247452698L;

      @Override
      public Object generateCell(final Table source, final Object itemId, Object columnId) {
        Button btn = new Button();
        btn.setIcon(FontAwesome.TIMES);
        btn.setStyleName(Reindeer.BUTTON_LINK);
        btn.setDescription(app.getMessageLocale(AppMessages.btnDelFromListPrompt));
        btn.addClickListener(new ClickListener() {
          private static final long serialVersionUID = -4987350697253652160L;

          @Override
          public void buttonClick(ClickEvent event) {
            Object p = ((BeanItem) source.getItem(itemId)).getBean();
            mailModel.removeRecipient(((Property) p).getId());

            source.removeItem(itemId);
          }
        });
        return btn;
      }
    });

    subwindow.setCaption(app.getMessageLocale(AppMessages.FormMailTitle));
    attachments.setCaption(app.getMessageLocale(AppMessages.FormMailAttachments));
    emailTo.setCaption(app.getMessageLocale(AppMessages.FormMailTo));
    btnAddMailTo.setCaption(app.getMessageLocale(AppMessages.FormMailAddEmail));
    recipients.setCaption(app.getMessageLocale(AppMessages.FormMailRecipients));
    subject.setCaption(app.getMessageLocale(AppMessages.FormMailSubject));
    message.setCaption(app.getMessageLocale(AppMessages.FormMailMessage));
    btnSend.setCaption(app.getMessageLocale(AppMessages.btnSend));
    btnCancel.setCaption(app.getMessageLocale(AppMessages.btnCancel));

    attachments.setVisibleColumns("name", "btnDelete");
    attachments.sort(new Object[] { "name" }, new boolean[] { true });
  }

  List<MailViewListener> listeners = new ArrayList<MailViewListener>();

  @Override
  public void addListener(MailViewListener listener) {
    listeners.add(listener);
  }

  @Override
  public void buttonClick(ClickEvent event) {
    for (MailViewListener listener : listeners) {
      listener.buttonClick(event.getButton().getData().toString());
    }

  }

  @Override
  public void showSucceedMessage() {
  }

  @Override
  public void showFailureMessage() {
  }

  @Override
  public KhipuAppUI getUIApp() {
    return app;
  }

  @Override
  public void setUIApp(KhipuAppUI _app) {
    this.app = _app;
  }

  @Override
  public void removeWindow() {
    getUI();
    UI.getCurrent().removeWindow(subwindow);
  }

  public Table getAttachments() {
    return attachments;
  }

  public Table getRecipients() {
    return recipients;
  }

  public TextField getEmailTo() {
    return emailTo;
  }

  public TextField getSubject() {
    return subject;
  }

  public RichTextArea getMessage() {
    return message;
  }

  public void setMailModel(MailModel _mailModel) {
    mailModel = _mailModel;
  }

  public void addEmail() {
    mailModel.addRecipient(getEmailTo().getValue());
    populateRecipients();
    getEmailTo().setCursorPosition(1);
    getEmailTo().setValue("");
  }

  public void populateAttachments() {
    BeanItemContainer<Property> propertyBeanItemContainer = new BeanItemContainer<Property>(
        Property.class);
    propertyBeanItemContainer.addAll(mailModel.getAttachments());
    attachments.setContainerDataSource(propertyBeanItemContainer);
    init();
  }

  public void populateRecipients() {
    BeanItemContainer<Property> propertyBeanItemContainer = new BeanItemContainer<Property>(
        Property.class);
    propertyBeanItemContainer.addAll(mailModel.getRecipients());
    recipients.setContainerDataSource(propertyBeanItemContainer);
    recipients.refreshRowCache();
    recipients.setVisibleColumns("name", "btnDelete");
    recipients.sort(new Object[] { "name" }, new boolean[] { true });
  }

  public void sendMail() {
    DialogBox box = new DialogBox(app);
    box.show(app.getMessageLocale(AppMessages.FormWarning),
        app.getMessageLocale(AppMessages.FormAreYouSureSend), new ConfirmListener() {
          private static final long serialVersionUID = 3500651267535289099L;

          @Override
          public void onClose(DialogBox dialog) throws Exception {
            if (dialog.isConfirmed()) {

              Mail mail = new Mail();
              mail.setSubject(getSubject().getValue());
              mail.setBody(getMessage().getValue());

              for (Property recipient : mailModel.getRecipients()) {
                mail.addRecipientTO(recipient.getId());
              }

              for (Property attach : mailModel.getAttachments()) {
                mail.addAttachment(attach.getId());
              }

              mail.send();

              removeWindow();
            }
          }
        });
  }

}
