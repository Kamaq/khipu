package com.raw.khipu.report;

import java.io.File;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.raw.khipu.KhipuAppUI;
import com.raw.khipu.dto.Property;
import com.raw.khipu.i18n.AppMessages;
import com.raw.khipu.mail.MailModel;
import com.raw.khipu.mail.MailPresenter;
import com.raw.khipu.mail.MailView;
import com.raw.khipu.mail.MailViewImpl;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.server.FileDownloader;
import com.vaadin.server.FileResource;
import com.vaadin.server.FontAwesome;
import com.vaadin.server.Resource;
import com.vaadin.server.ThemeResource;
import com.vaadin.server.VaadinService;
import com.vaadin.server.VaadinServlet;
import com.vaadin.ui.AbstractComponent;
import com.vaadin.ui.AbstractSelect;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.BrowserFrame;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.UI;
import com.vaadin.ui.Window;

public class ReportViewImpl extends CustomComponent implements ReportView, ClickListener,
    ValueChangeListener {

  private static final long serialVersionUID = -8116787911085659936L;
  @AutoGenerated
  private KhipuAppUI app;
  private GridLayout mainLayout;
  private GridLayout formLayout;
  private GridLayout filterLayout;
  private Label formTitle;
  private GridLayout toolBar;
  private Button btnExecute;
  private Button btnExportToExcel;
  private Button btnSendByEmail;
  private String ButtonWidth = "110px";
  private FileResource myResource;
  private FileDownloader fileDownloader;
  private GridLayout paramLayout;
  private List<String> functions = new ArrayList<String>();
  private int nroToolBarCols = 3;
  private int nroToolBarRows = 1;
  private int nroParamLayoutCols = 4;
  private int nroParamLayoutRows = 3;
  private Resource pdfViewer;
  private BrowserFrame frame;
  private String reportFileName;
  private String reportFileNameTemporal;
  private Window subwindow;
  private Map reportParams = new HashMap();
  private List<Object> listOfValues = new ArrayList<Object>();
  private List<Object[][]> listOfValuesComponentBinder = new ArrayList<Object[][]>();
  private String basepath;
  private String servletPath;
  private String userTempFolder;
  private MailModel mailModel;
  private MailView mailView;

  public ReportViewImpl() {
    buildMainLayout();
    setCompositionRoot(mainLayout);
    setSizeFull();
    setImmediate(true);
  }

  @AutoGenerated
  private GridLayout buildMainLayout() {

    mainLayout = new GridLayout(1, 4);
    mainLayout.setImmediate(true);

    formLayout = new GridLayout(2, 2);
    formLayout.setWidth("100%");

    formTitle = new Label("Form Title");
    formTitle.setStyleName("raw-title raw-font-color");

    HorizontalLayout toolbarLayout = new HorizontalLayout();
    toolbarLayout.addComponent(formTitle);
    toolbarLayout.setSizeFull();

    formLayout.addComponent(formTitle, 0, 0);
    formLayout.setComponentAlignment(formTitle, Alignment.MIDDLE_LEFT);

    paramLayout = new GridLayout(nroParamLayoutCols, nroParamLayoutRows);
    paramLayout.setSpacing(true);
    formLayout.addComponent(paramLayout, 0, 1);
    formLayout.setComponentAlignment(paramLayout, Alignment.MIDDLE_LEFT);

    toolBar = new GridLayout(nroToolBarCols, nroToolBarRows);
    formLayout.addComponent(toolBar, 1, 0, 1, 1);
    formLayout.setComponentAlignment(toolBar, Alignment.TOP_RIGHT);

    btnExecute = new Button();
    btnExecute.setIcon(FontAwesome.GEARS);
    // btnExecute.setStyleName(Reindeer.BUTTON_LINK + " raw-button-image");
    btnExecute.setData("btnExecute");
    toolBar.addComponent(btnExecute);

    btnExecute.addClickListener(new ClickListener() {
      private static final long serialVersionUID = -856418220085552367L;

      @Override
      public void buttonClick(ClickEvent event) {
        execute();
      }

    });
    ;
    btnExportToExcel = new Button();
    btnExportToExcel.setIcon(FontAwesome.DOWNLOAD);
    // btnExportToExcel.setStyleName(Reindeer.BUTTON_LINK + " raw-button-image");
    btnExportToExcel.setData("btnExportToExcel");
    toolBar.addComponent(btnExportToExcel);

    basepath = VaadinService.getCurrent().getBaseDirectory().getAbsolutePath();
    myResource = new FileResource(new File(basepath
        + "/WEB-INF/images/open-iconic-master/svg/menu.svg"));
    fileDownloader = new FileDownloader(myResource);
    fileDownloader.extend(btnExportToExcel);

    frame = new BrowserFrame(null, pdfViewer);

    btnSendByEmail = new Button();
    btnSendByEmail.setIcon(FontAwesome.ENVELOPE);
    // btnSendByEmail.setStyleName(Reindeer.BUTTON_LINK + " raw-button-image");
    btnSendByEmail.setData("btnSendByEmail");
    toolBar.addComponent(btnSendByEmail);

    btnSendByEmail.addClickListener(new ClickListener() {
      private static final long serialVersionUID = -8159187532076086533L;

      @Override
      public void buttonClick(ClickEvent event) {
        sendByEmail();
      }
    });
    ;

    mainLayout.addComponent(formLayout);
    // Expandir completamente la celda 2, que es propiamente la tabla
    mainLayout.setRowExpandRatio(1, 1);

    mainLayout.setSizeFull();
    mainLayout.setMargin(true);

    return mainLayout;
  }

  List<ReportViewListener> listeners = new ArrayList<ReportViewListener>();

  @Override
  public void addListener(ReportViewListener listener) {
    listeners.add(listener);
  }

  @Override
  public void buttonClick(ClickEvent event) {
    for (ReportViewListener listener : listeners) {
      listener.buttonClick(event.getButton().getData().toString());
    }
  }

  @Override
  public void valueChange(ValueChangeEvent event) {
    try {
      for (ReportViewListener listener : listeners) {
        String component = ((AbstractSelect) event.getProperty()).getData().toString();
        String value = ((Property) event.getProperty().getValue()).getId();
        listener.valueChange(component, value);
      }
    } catch (java.lang.NullPointerException e) {
      System.out.println("Bug : There null value from predecesor list.");
    }
  }

  @Override
  public List<String> getGrantedFunctions() {
    return this.functions;
  }

  @Override
  public void setGrantedFunctions(List<String> functions) {
    this.functions = functions;
    setRights();
    setLocaleComponents();
    bindListOfValuesWithComponents();
    populateComponents();
  }

  @Override
  public KhipuAppUI getApp() {
    return this.app;
  }

  @Override
  public void setApp(KhipuAppUI app) {
    this.app = app;
  }

  @Override
  public void setRights() {

    int nroComponentes = toolBar.getComponentCount();
    int cols = 0;

    // Loop at toolbar rows level
    for (int f = 0; f < nroToolBarRows; f++) {
      if (nroComponentes < nroToolBarCols) {
        cols = nroComponentes;
      } else {
        cols = nroToolBarCols;
      }

      // Loop at toolbar columns level
      for (int c = 0; c < cols; c++) {
        Component component = (Component) toolBar.getComponent(c, f);
        String nameComponent = ((AbstractComponent) component).getData().toString().trim();
        component.setEnabled(false);

        // Evaluate access for each component
        for (String function : getGrantedFunctions()) {
          if (nameComponent.equalsIgnoreCase(function.trim())) {
            component.setEnabled(true);
          }
        }
      }

      if (nroComponentes < nroToolBarCols) {
        break;
      } else {
        nroComponentes = nroComponentes - nroToolBarCols;
      }
    }

    // Apply localization to internal buttons
    btnExecute.setDescription(app.getMessageLocale(AppMessages.btnExecute));
    btnExportToExcel.setDescription(app.getMessageLocale(AppMessages.btnExportToExcel));
    btnSendByEmail.setDescription(app.getMessageLocale(AppMessages.btnSendByEmail));

    app.getMainView().getFormContainer().setSizeFull();
  }

  public void setStyleParamLayout() {
    int nroComponentes = paramLayout.getComponentCount();
    int cols = 0;

    // Loop at toolbar rows level
    for (int f = 0; f < nroParamLayoutRows; f++) {
      if (nroComponentes < nroParamLayoutCols) {
        cols = nroComponentes;
      } else {
        cols = nroParamLayoutCols;
      }

      // Loop at toolbar columns level
      for (int c = 0; c < cols; c++) {
        Component component = (Component) paramLayout.getComponent(c, f);
        // Apply style for each component
        component.setStyleName("whiteLabel");
      }

      if (nroComponentes < nroParamLayoutCols) {
        break;
      } else {
        nroComponentes = nroComponentes - nroParamLayoutCols;
      }
    }

  }

  public String getFormTitle() {
    return formTitle.getValue().toString();
  }

  public void setFormTitle(String title) {
    this.formTitle.setValue(title);
  }

  @Override
  public String getReportFileName() {
    return reportFileName;
  }

  @Override
  public void setReportFileName(String reportFileName) {
    this.reportFileName = reportFileName;
  }

  @Override
  public String getReportFileNameTemporal() {
    return reportFileNameTemporal;
  }

  @Override
  public void setReportFileNameTemporal(String reportFileNameTemporal) {
    this.reportFileNameTemporal = reportFileNameTemporal;
  }

  @Override
  public Map getReportParams() {
    return reportParams;
  }

  @Override
  public void setReportParams(String paramName, String paramValue) {
    this.reportParams.put(paramName, paramValue);
  }

  @Override
  public void execute() {
    // Generate a filename with a timestamp.
    SimpleDateFormat df = new SimpleDateFormat("yyyyMMddHHmmssSSS");
    this.reportFileNameTemporal = reportFileName + df.format(new Date());

    setParams();

    Object[] params = new Object[2];
    params[0] = this;
    params[1] = UI.getCurrent().getTheme();

    ReportEngine.main(params);
  }

  @Override
  public void showPDFPreview() {
    userTempFolder = app.getRegisteredUser().getName().trim() + "/";

    pdfViewer = new ThemeResource(ReportEngine.PDF_VIEWER_PATH + userTempFolder
        + reportFileNameTemporal + ".pdf");

    frame = new BrowserFrame(null, pdfViewer);
    frame.setSizeFull();
    frame.setImmediate(true);
    // Remove row 0, col 3 where place the frame component
    mainLayout.removeComponent(0, 1);
    mainLayout.addComponent(frame, 0, 1);

    // Expandir completamente la celda 2, que es propiamente la tabla
    mainLayout.setRowExpandRatio(1, 1);

    servletPath = VaadinServlet.getCurrent().getServletContext().getRealPath("/");
    myResource = new FileResource(new File(servletPath + ReportEngine.TEMP_FOLDER + userTempFolder
        + this.reportFileNameTemporal + ".xls"));
    fileDownloader.setFileDownloadResource(myResource);
  }

  @Override
  public List<Object> getListOfValues() {
    return listOfValues;
  }

  @Override
  public void addListOfValues(int index, Object listOfValue) {
    this.listOfValues.add(index, listOfValue);
  }

  @Override
  public void populateComponents() {

    for (Object[][] relation : this.listOfValuesComponentBinder) {
      ComboBox combo = ((ComboBox) relation[1][0]);
      List<Property> dataList = (List<Property>) relation[0][0];

      BeanItemContainer propertyBeanItemContainer = new BeanItemContainer<Property>(Property.class);
      propertyBeanItemContainer.addAll((Collection<Property>) dataList);
      combo.setContainerDataSource(propertyBeanItemContainer);
    }

  }

  @Override
  public void populateComponent(int index) {
    Object[][] relation = this.listOfValuesComponentBinder.get(index);

    ComboBox combo = ((ComboBox) relation[1][0]);
    List<Property> dataList = (List<Property>) relation[0][0];

    BeanItemContainer propertyBeanItemContainer = new BeanItemContainer<Property>(Property.class);
    propertyBeanItemContainer.addAll((Collection<Property>) dataList);
    combo.setContainerDataSource(propertyBeanItemContainer);
  }

  @Override
  public void setListOfValueWithComponent(int index, Object list, Component component) {
    // List that save relation bewteen Data Lists and Combo Components
    Object[][] relation = new Object[2][1];
    relation[0][0] = list;
    relation[1][0] = component;
    this.listOfValuesComponentBinder.add(index, relation);
  }

  @Override
  public GridLayout getParamLayout() {
    return paramLayout;
  }

  @Override
  public void addParameterLayout(Component component) {
    this.paramLayout.addComponent(component);
  }

  @Override
  public void setLocaleComponents() {
  }

  @Override
  public void bindListOfValuesWithComponents() {
  }

  @Override
  public void setParams() {
  }

  public void openWindow(Window _window) {
    this.subwindow = _window;
    if (this.subwindow.getParent() == null) {
      getUI();
      UI.getCurrent().addWindow(this.subwindow);
      this.subwindow.center();
    }
  }

  @Override
  public void sendByEmail() {
    // View-Model-Presenter pattern for the mail form
    mailModel = new MailModel();
    MailView mailView = new MailViewImpl();

    String message = "<p>" + app.getMessageLocale(AppMessages.FormMsgDefaultGreeting) + "</p>"
        + "<p>" + app.getMessageLocale(AppMessages.FormMsgDefaultIntro) + "</p>" + "<p>"
        + app.getMessageLocale(AppMessages.FormMsgDefaultEssential)
        + app.getRegisteredUser().getEmail().trim() + ".</p>" + "<p>"
        + app.getMessageLocale(AppMessages.FormMsgDefaultBye) + "</p>" + "<p>"
        + app.getRegisteredUser().getName().trim() + ".</p>";

    ((MailViewImpl) mailView).getSubject().setValue(formTitle.getValue());
    ((MailViewImpl) mailView).getMessage().setValue(message);

    mailModel.addAttachment(servletPath + ReportEngine.TEMP_FOLDER + userTempFolder
        + this.reportFileNameTemporal + ".pdf", getReportFileNameTemporal() + ".pdf");
    mailModel.addAttachment(servletPath + ReportEngine.TEMP_FOLDER + userTempFolder
        + this.reportFileNameTemporal + ".xls", getReportFileNameTemporal() + ".xls");

    MailPresenter mailPresenter = new MailPresenter(mailModel, mailView, app);
    openWindow(mailPresenter.getWindow());
  }

}
