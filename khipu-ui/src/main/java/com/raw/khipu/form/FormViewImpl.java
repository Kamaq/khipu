package com.raw.khipu.form;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.raw.khipu.KhipuAppUI;
import com.raw.khipu.i18n.AppMessages;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Container.Filterable;
import com.vaadin.data.Item;
import com.vaadin.data.Property.ReadOnlyException;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.data.fieldgroup.BeanFieldGroup;
import com.vaadin.data.fieldgroup.FieldGroup.CommitException;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.data.util.IndexedContainer;
import com.vaadin.data.util.filter.SimpleStringFilter;
import com.vaadin.event.FieldEvents;
import com.vaadin.event.FieldEvents.TextChangeEvent;
import com.vaadin.navigator.View;
import com.vaadin.navigator.ViewChangeListener.ViewChangeEvent;
import com.vaadin.ui.AbstractComponent;
import com.vaadin.ui.AbstractField;
import com.vaadin.ui.AbstractSelect;
import com.vaadin.ui.AbstractSelect.ItemCaptionMode;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.FormLayout;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Table;
import com.vaadin.ui.Table.HeaderClickEvent;
import com.vaadin.ui.Table.HeaderClickListener;
import com.vaadin.ui.TextField;
import com.vaadin.ui.UI;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window;

public class FormViewImpl extends CustomComponent implements FormView, ClickListener, View {

  private static final long serialVersionUID = -7912565169235650384L;
  @AutoGenerated
  private KhipuAppUI app;
  private GridLayout mainLayout;
  private Label formTitle;
  private Button btnCloseForm;
  private Label lblSearch;
  private TextField txtSearch;
  private String filterColumnName;
  private String filterHeaderName;
  private Table firstTable;
  private GridLayout toolBar;
  private List<String> functions = new ArrayList<String>();
  private int nroToolBarCols = 8;
  private int nroToolBarRows = 2;
  private String ButtonWidth = new String("110px");
  private List<Object> tableModelList = new ArrayList<Object>();
  private List<Object[][]> tableModelComponentBinder = new ArrayList<Object[][]>();
  private BeanItemContainer propertyBeanItemContainer;
  private Window subwindow;
  private Window editWindow;
  private FormLayout formEditLayout;
  private FormModel formModel;
  private String formNameClass;
  private Button btnCommit;
  private Button btnRollback;
  private BeanFieldGroup<Object> fieldGroup;
  public static String CREATE_MODE = new String("Create");
  public static String MODIFY_MODE = new String("Modify");
  public static String CHANGE_STATUS_MODE = new String("Change Status");
  public static String DELETE_MODE = new String("Delete");
  public static String FIRST_DETAIL_MODE = new String("First Detail");
  public static String SECOND_DETAILS_MODE = new String("Second Detail");
  public static String THIRD_DETAILS_MODE = new String("Third Detail");
  private String editionMode = CREATE_MODE;
  private Object entityId;
  private Class<?> entityClass;
  private Map<String, Object> parameters = new HashMap<String, Object>();
  private Map<String, Object> childsForm = new HashMap<String, Object>();

  private CustomComponent getLocalInstance() {
    return this;
  }

  public FormViewImpl() {
    buildMainLayout();
    setCompositionRoot(mainLayout);
    setSizeFull();
    setImmediate(true);
  }

  @AutoGenerated
  private GridLayout buildMainLayout() {

    mainLayout = new GridLayout(1, 4);
    // mainLayout.setStyleName("raw-background-color");
    mainLayout.setImmediate(true);

    subwindow = new Window();
    formTitle = new Label("Form Title");
    formTitle.setStyleName("raw-title raw-font-color");

    // Define Close Form Button
    btnCloseForm = new Button("x");
    btnCloseForm.addClickListener(new ClickListener() {
      private static final long serialVersionUID = 3631713115402330668L;

      @Override
      public void buttonClick(ClickEvent event) {
        getApp().removeFormFromNavigationMap(formNameClass);
        getApp().getNavigator().navigateTo(getApp().MAINVIEW);
      }
    });

    // Set Filter by Selected Column
    lblSearch = new Label();
    lblSearch.setSizeUndefined();
    lblSearch.setStyleName("raw-font-color");
    txtSearch = new TextField();
    txtSearch.setSizeUndefined();
    txtSearch.addTextChangeListener(new FieldEvents.TextChangeListener() {
      private static final long serialVersionUID = 8453672407902954581L;
      SimpleStringFilter filter = null;

      @Override
      public void textChange(TextChangeEvent event) {

        if (event.getText() != null && filterColumnName != null) {
          Filterable f = (Filterable) getFirstTable().getContainerDataSource();

          // remove old filter
          if (filter != null) {
            f.removeContainerFilter(filter);
          }
          // Set new filter for the Name column
          filter = new SimpleStringFilter(filterColumnName, event.getText(), true, true);
          f.addContainerFilter(filter);
        } else {
          Notification.show(app.getMessageLocale(AppMessages.FormWarning),
              app.getMessageLocale(AppMessages.FormMustSelectColumnForSearch),
              Notification.Type.WARNING_MESSAGE);
        }
      }
    });

    // Define First Table
    firstTable = new Table();
    firstTable.setNullSelectionAllowed(false);
    firstTable.setSelectable(true);
    firstTable.setImmediate(true);
    firstTable.setWidth("100%");
    firstTable.setPageLength(5);
    firstTable.setFooterVisible(true);

    // Implements search behavior
    firstTable.addHeaderClickListener(new HeaderClickListener() {
      private static final long serialVersionUID = 1L;

      @Override
      public void headerClick(HeaderClickEvent event) {

        filterColumnName = event.getPropertyId().toString();
        filterHeaderName = ((Table) event.getSource()).getColumnHeader(event.getPropertyId())
            .toString();
        lblSearch.setCaption(app.getMessageLocale(AppMessages.txtSearchBy) + " " + filterHeaderName);
      }
    });

    // Implements master-detail behavior
    firstTable.addValueChangeListener(new ValueChangeListener() {
      private static final long serialVersionUID = -6659675242089175722L;

      @Override
      public void valueChange(ValueChangeEvent event) {

        // throw sinchronize signal for registered child forms
        for (Map.Entry<String, Object> entry : getChildsForm().entrySet()) {
          ((FormView) entry.getValue()).synchronizeWithParentForm(event.getProperty().getValue());
        }

      }
    });

    toolBar = new GridLayout(nroToolBarCols, nroToolBarRows);

    GridLayout topToolBar = new GridLayout(2, 2);
    topToolBar.addComponent(formTitle, 0, 0);
    topToolBar.setComponentAlignment(formTitle, Alignment.BOTTOM_LEFT);
    topToolBar.addComponent(toolBar, 0, 1);
    topToolBar.setComponentAlignment(toolBar, Alignment.BOTTOM_LEFT);
    topToolBar.addComponent(lblSearch, 1, 0); // 0, 0);
    topToolBar.setComponentAlignment(lblSearch, Alignment.BOTTOM_RIGHT);
    topToolBar.addComponent(txtSearch, 1, 1); // 0, 1);
    topToolBar.setComponentAlignment(txtSearch, Alignment.TOP_RIGHT);
    // topToolBar.addComponent(btnCloseForm, 1, 0, 1, 1);
    // topToolBar.setComponentAlignment(btnCloseForm, Alignment.TOP_RIGHT);
    topToolBar.setWidth("100%");

    // mainLayout.addComponent(formTitle);
    // mainLayout.setComponentAlignment(formTitle, Alignment.MIDDLE_LEFT);
    mainLayout.addComponent(topToolBar);
    mainLayout.setComponentAlignment(topToolBar, Alignment.MIDDLE_LEFT);
    mainLayout.addComponent(firstTable);
    // mainLayout.addComponent(toolBar);
    // Expandir completamente la celda 2, que es propiamente la tabla
    mainLayout.setRowExpandRatio(2, 1);

    mainLayout.setSizeFull();
    mainLayout.setMargin(true);

    formEditLayout = new FormLayout();
    editWindow = new Window();
    btnCommit = new Button("");
    btnRollback = new Button("");

    btnCommit.addClickListener(new ClickListener() {
      private static final long serialVersionUID = -949518831662384225L;

      @Override
      public void buttonClick(ClickEvent event) {
        try {
          fieldGroup.commit();

          if (editionMode.equalsIgnoreCase(CREATE_MODE)) {
            setPrimaryKey((Object) fieldGroup.getItemDataSource().getBean());

            getFormModel().insertRecord((Object) fieldGroup.getItemDataSource().getBean());
            refreshComponents();
          }

          if (editionMode.equalsIgnoreCase(MODIFY_MODE)) {

            if (getEntityId() instanceof String) {
              getFormModel().updateRecord(getEntityClass(),
                  (Object) fieldGroup.getItemDataSource().getBean(), (String) getEntityId());
            } else {
              getFormModel().updateRecord(getEntityClass(),
                  (Object) fieldGroup.getItemDataSource().getBean(), getEntityId());
            }
            firstTable.refreshRowCache();
          }

          removeWindow();
        } catch (java.lang.NullPointerException e) {
          Notification.show(getApp().getMessageLocale(AppMessages.FormError), getApp()
              .getMessageLocale(AppMessages.FormMustFillMandatoryItems),
              Notification.Type.ERROR_MESSAGE);
          System.out.println("CommitException: " + e.getMessage());
          e.printStackTrace();
        } catch (CommitException e) {
          Notification.show(getApp().getMessageLocale(AppMessages.FormError), getApp()
              .getMessageLocale(AppMessages.FormMustFillMandatoryItems),
              Notification.Type.ERROR_MESSAGE);
          System.out.println("CommitException: " + e.getMessage());
          e.printStackTrace();
        } catch (javax.persistence.RollbackException e) {
          Notification.show(getApp().getMessageLocale(AppMessages.FormError), getApp()
              .getMessageLocale(AppMessages.FormMustFillMandatoryItems),
              Notification.Type.ERROR_MESSAGE);
          System.out.println("RollbackException: " + e.getMessage());
          e.printStackTrace();
        } catch (Exception e) {
          Notification.show(getApp().getMessageLocale(AppMessages.FormError), e.getMessage(),
              Notification.Type.ERROR_MESSAGE);
          e.printStackTrace();
        }
      }
    });

    btnRollback.addClickListener(new ClickListener() {
      private static final long serialVersionUID = 6959769089637500225L;

      @Override
      public void buttonClick(ClickEvent event) {
        fieldGroup.discard();
        removeWindow();
      }
    });

    return mainLayout;
  }

  @Override
  public void setBeanFieldGroupWithComponent(Object entity, FormView formView, int _entityId) {
    fieldGroup = new BeanFieldGroup<Object>(Object.class);
    fieldGroup.setItemDataSource(entity);
    fieldGroup.bindMemberFields(formView);

    applyValidations();
    this.entityId = _entityId;
  }

  @Override
  public void setBeanFieldGroupWithComponent(Object entity, FormView formView, Object _entityId) {
    fieldGroup = new BeanFieldGroup<Object>(Object.class);
    fieldGroup.setItemDataSource(entity);
    fieldGroup.bindMemberFields(formView);

    applyValidations();
    this.entityId = _entityId;
  }

  @Override
  public BeanFieldGroup<Object> getFieldGroup() {
    return fieldGroup;
  }

  @Override
  public void openEditWindow(String mode) {
    setEditionMode(mode);
    prepareEdition(mode);

    if ((getEditionMode().equalsIgnoreCase(CREATE_MODE) || (getEditionMode()
        .equalsIgnoreCase(MODIFY_MODE)) && getFirstTable().getValue() != null)
        && getFieldGroup() != null) {

      editWindow.setModal(true);
      editWindow.setWidth("70%");
      // editWindow.setHeight("80%");
      editWindow.setClosable(false);

      // GridLayout editWindowLayout = new GridLayout(1, 3);
      VerticalLayout editWindowLayout = new VerticalLayout();
      formEditLayout.setSizeFull();

      for (int i = 0; i < formEditLayout.getComponentCount(); i++) {
        formEditLayout.getComponent(i).setWidth("90%");
      }
      for (int i = 0; i < formEditLayout.getComponentCount(); i++) {
        if (formEditLayout.getComponent(i) instanceof AbstractField
            && formEditLayout.getComponent(i).isEnabled()
            && ((getEditionMode().equalsIgnoreCase(CREATE_MODE) && ((AbstractField) formEditLayout
                .getComponent(i)).getValue() == null) || (getEditionMode()
                .equalsIgnoreCase(MODIFY_MODE)))

        ) {

          ((AbstractField) formEditLayout.getComponent(i)).focus();
          break;
        }
      }

      HorizontalLayout toolBarEditWindow = new HorizontalLayout();
      toolBarEditWindow.addComponent(btnCommit);
      toolBarEditWindow.setSpacing(true);
      btnCommit.setWidth(ButtonWidth);
      toolBarEditWindow.addComponent(btnRollback);
      btnRollback.setWidth(ButtonWidth);
      toolBarEditWindow.setSizeUndefined();

      HorizontalLayout topEditLayout = new HorizontalLayout();
      Label lblDummy = new Label("");
      topEditLayout.addComponent(lblDummy);
      topEditLayout.setExpandRatio(lblDummy, 1);
      topEditLayout.addComponent(formEditLayout);
      topEditLayout.setExpandRatio(formEditLayout, 14);
      topEditLayout.setSizeFull();

      HorizontalLayout bottomEditWindow = new HorizontalLayout();
      Label lblDumm = new Label("");
      bottomEditWindow.addComponent(lblDumm);
      bottomEditWindow.setExpandRatio(lblDumm, 1);
      bottomEditWindow.addComponent(toolBarEditWindow);
      bottomEditWindow.setExpandRatio(toolBarEditWindow, 14);
      bottomEditWindow.setSizeFull();

      editWindowLayout.addComponent(topEditLayout);
      editWindowLayout.setExpandRatio(topEditLayout, 10);
      editWindowLayout.addComponent(bottomEditWindow);
      editWindowLayout.setExpandRatio(bottomEditWindow, 1);
      editWindowLayout.addComponent(new Label(""));

      editWindowLayout.setSpacing(true);
      editWindowLayout.setMargin(true);
      editWindow.setContent(editWindowLayout);
      setWindow(editWindow);
    }
  }

  @Override
  public void setEditWindowTitle(String title) {
    editWindow.setCaption(title);
  }

  @Override
  public FormModel getFormModel() {
    return formModel;
  }

  @Override
  public void setFormModel(FormModel formModel) {
    this.formModel = formModel;
  }

  @Override
  public FormLayout getFormEditLayout() {
    return formEditLayout;
  }

  @Override
  public Label getFormTitle() {
    return formTitle;
  }

  @Override
  public void setFormTitle(String formTitle) {
    this.formTitle.setValue(formTitle);
  }

  @Override
  public Table getFirstTable() {
    return firstTable;
  }

  @Override
  public GridLayout getToolBar() {
    return toolBar;
  }

  List<FormViewListener> listeners = new ArrayList<FormViewListener>();

  @Override
  public void addListener(FormViewListener listener) {
    listeners.add(listener);
  }

  @Override
  public void buttonClick(ClickEvent event) {
    for (FormViewListener listener : listeners) {
      listener.buttonClick(event.getButton().getData().toString());
    }
  }

  @Override
  public List<String> getGrantedFunctions() {
    return this.functions;
  }

  @Override
  public void init() {
    try {
      // Getting access permission from model
      setGrantedFunctions(getFormModel().getGrantedComponentFunctions(app.getRegisteredUser(),
          app.getCurrentFormComponent()));
      // Applying permissions to components
      setRights();
      // Applying locale characteristics
      setLocaleComponents();
      // Binding data model with components
      bindTableModelWithComponents();
      // Showing data on components
      populateComponents();
      // Define columns to visible
      setVisibleColumns();
      // Register relationship with others forms
      registerChildForms();

      app.getMainView().getFormContainer().setSizeUndefined();
      app.getMainView().getFormContainer().setWidth("100%");
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  public void setGrantedFunctions(List<String> functions) {
    this.functions = functions;
  }

  public String getEditionMode() {
    return editionMode;
  }

  public void setEditionMode(String mode) {
    this.editionMode = mode;
  }

  public Object getEntityId() {
    return entityId;
  }

  @Override
  public Class<?> getEntityClass() {
    return entityClass;
  }

  @Override
  public void setEntityClass(Class<?> entityClass) {
    this.entityClass = entityClass;
  }

  @Override
  public KhipuAppUI getApp() {
    return this.app;
  }

  public void setApp(KhipuAppUI app) {
    this.app = app;
  }

  @Override
  public void setRights() {

    int nroComponentes = toolBar.getComponentCount();
    int cols = 0;

    // Loop at toolbar rows level
    for (int f = 0; f < nroToolBarRows; f++) {
      if (nroComponentes < nroToolBarCols) {
        cols = nroComponentes;
      } else {
        cols = nroToolBarCols;
      }

      // Loop at toolbar columns level
      for (int c = 0; c < cols; c++) {
        Component component = (Component) toolBar.getComponent(c, f);
        String nameComponent = ((AbstractComponent) component).getData().toString().trim();
        component.setEnabled(false);
        component.setWidth(ButtonWidth);

        // Evaluate access for each component
        for (String function : getGrantedFunctions()) {
          if (nameComponent.equalsIgnoreCase(function.trim())) {
            component.setEnabled(true);
          }
        }
      }

      if (nroComponentes < nroToolBarCols) {
        break;
      } else {
        nroComponentes = nroComponentes - nroToolBarCols;
      }
    }

    // Apply localization to internal buttons
    btnCloseForm.setDescription(app.getMessageLocale(AppMessages.btnClose));
    lblSearch.setCaption(app.getMessageLocale(AppMessages.txtSearchBy));
    btnCommit.setCaption(app.getMessageLocale(AppMessages.btnCommit));
    btnRollback.setCaption(app.getMessageLocale(AppMessages.btnRollback));
  }

  @Override
  public List<Object> getTableModelList() {
    return tableModelList;
  }

  public void addTableModel(int index, Object tableModel) {
    if (this.tableModelList.size() >= (index + 1)) {
      this.tableModelList.remove(index);
    }
    this.tableModelList.add(index, tableModel);
  }

  @Override
  public BeanItemContainer getPropertyBeanItemContainer() {
    return propertyBeanItemContainer;
  }

  @Override
  public void setPropertyBeanItemContainer(BeanItemContainer beanItemProperty) {
    this.propertyBeanItemContainer = beanItemProperty;
  }

  @Override
  public void populateComponents() {
    for (Object[][] relation : this.tableModelComponentBinder) {
      AbstractSelect table = ((AbstractSelect) relation[1][0]);
      List<Object> dataList = (List<Object>) relation[0][0];

      propertyBeanItemContainer.addAll((Collection<Object>) dataList);
      table.setContainerDataSource(propertyBeanItemContainer);
    }
  }

  @Override
  public void populateComponent(int index) {
    Object[][] relation = this.tableModelComponentBinder.get(index);

    AbstractSelect table = ((AbstractSelect) relation[1][0]);
    List<Object> dataList = (List<Object>) relation[0][0];

    propertyBeanItemContainer.addAll((Collection<Object>) dataList);
    table.setContainerDataSource(propertyBeanItemContainer);
  }

  @Override
  public void setTableModelWithComponent(int index, Object tableModel, Component component) {
    // List that save relation bewteen Data Lists and Combo Components
    addTableModel(index, tableModel);

    Object[][] relation = new Object[2][1];
    relation[0][0] = tableModel;
    relation[1][0] = component;
    this.tableModelComponentBinder.add(index, relation);
  }

  @Override
  public void setWindow(Window window) {
    this.subwindow = window;

    if (this.subwindow.getParent() == null) {
      getUI();
      UI.getCurrent().addWindow(this.subwindow);
      this.subwindow.center();
    }
  }

  @Override
  public void removeWindow() {
    getUI();
    UI.getCurrent().removeWindow(subwindow);
  }

  @Override
  public String getFormNameClass() {
    return formNameClass;
  }

  @Override
  public void setFormNameClass(String formNameClass) {
    this.formNameClass = formNameClass;
  }

  @Override
  public Object getParameter(String paramName) {
    return parameters.get(paramName);
  }

  @Override
  public void setParameter(String paramName, Object value) {
    this.parameters.put(paramName, value);
  }

  @Override
  public Map<String, Object> getParameters() {
    return parameters;
  }

  @Override
  public void setParameters(Map<String, Object> parameters) {
    this.parameters = parameters;
  }

  @Override
  public void bindTableModelWithComponents() {
  }

  @Override
  public void prepareEdition(String editionMode) {
  }

  @Override
  public void setVisibleColumns() {
  }

  @Override
  public void setLocaleComponents() {
  }

  @Override
  public void applyValidations() {
  }

  @Override
  public void refreshComponents() {
  }

  @Override
  public void enter(ViewChangeEvent event) {
  }

  @Override
  public void searchByParameters() {

    if (parameters != null) {
      for (Map.Entry<String, Object> entry : parameters.entrySet()) {
        if (entry.getKey() != null) {
          this.filterColumnName = entry.getKey();
          this.filterHeaderName = entry.getKey();
          this.txtSearch.setValue((String) entry.getValue());
          this.lblSearch.setCaption(app.getMessageLocale(AppMessages.txtSearchBy) + " "
              + filterHeaderName);
          SimpleStringFilter filter = null;
          Filterable f = (Filterable) getFirstTable().getContainerDataSource();

          // Set new filter for the Name column
          filter = new SimpleStringFilter(entry.getKey(), (String) entry.getValue(), true, true);
          f.addContainerFilter(filter);
        }
      }
    }
  }

  @Override
  public void setEntityIndexedContainer(AbstractSelect selectComponent, Object dataList) {
    IndexedContainer entityIndexedContainer;
    entityIndexedContainer = new IndexedContainer();
    entityIndexedContainer.addContainerProperty("name", Object.class, "");
    entityIndexedContainer.addContainerProperty("bean", Object.class, null);

    try {
      for (Object entity : (List) dataList) {
        Object itemId = entityIndexedContainer.addItem();
        Item item = entityIndexedContainer.getItem(itemId);
        item.getItemProperty("name").setValue(entity.toString());
        item.getItemProperty("bean").setValue(entity);
      }

      selectComponent.setContainerDataSource(entityIndexedContainer);
      selectComponent.setConverter(new IndexToEntityConverter(entityIndexedContainer));
      selectComponent.setItemCaptionMode(ItemCaptionMode.ID);
      selectComponent.setItemCaptionPropertyId("name");

    } catch (ReadOnlyException e) {
      e.printStackTrace();
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  public Map<String, Object> getChildsForm() {
    return childsForm;
  }

  @Override
  public void addDetailForm(String formName, CustomComponent form) {
    this.childsForm.put(formName, form);
  }

  @Override
  public void synchronizeWithParentForm(Object parent) {
  }

  @Override
  public void registerChildForms() throws Exception {
  }

  @Override
  public void setPrimaryKey(Object entity) {

  }

}