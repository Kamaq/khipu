package com.raw.khipu.form;

import java.io.Serializable;
import java.text.NumberFormat;
import java.util.Locale;

import com.raw.khipu.KhipuAppUI;
import com.raw.khipu.i18n.AppMessages;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Notification;
import com.vaadin.ui.UI;
import com.vaadin.ui.Window;
import com.vaadin.ui.Window.CloseEvent;
import com.vaadin.ui.Window.CloseListener;

public class DialogBox extends CustomComponent implements CloseListener {

  private static final long serialVersionUID = -7311017722221149453L;
  @AutoGenerated
  private ConfirmListener listener;
  private Window boxWindow;
  private GridLayout messageLayout;
  private boolean response = false;
  private KhipuAppUI app;
  private String ButtonWidth = new String("90px");

  // System wide defaults
  public static final int CONTENT_TEXT_WITH_NEWLINES = -1;
  public static final int CONTENT_DEFAULT = CONTENT_TEXT_WITH_NEWLINES;
  private static final double MIN_WIDTH = 20d;
  private static final double MAX_WIDTH = 40d;
  private static final double MIN_HEIGHT = 1d;
  private static final double MAX_HEIGHT = 30d;

  public interface ConfirmListener extends Serializable {

    public void onClose(DialogBox dialog) throws Exception;
  }

  public DialogBox(KhipuAppUI app) {
    this.app = app;
  }

  public void show(String messageTitle, String messageContent, ConfirmListener _listener) {
    this.listener = _listener;

    boxWindow = new Window();
    boxWindow.addCloseListener(this);
    boxWindow.setHeight("30%");
    boxWindow.setWidth("50%");
    boxWindow.setCaption(messageTitle);

    messageLayout = new GridLayout(1, 2);

    Label message = new Label(messageContent);
    message.setSizeUndefined();
    // message.setStyleName("whiteLabel");

    // Approximate the size of the dialog
    double[] dim = getDialogDimensions(messageContent, CONTENT_TEXT_WITH_NEWLINES);
    boxWindow.setWidth(format(dim[0]) + "em");
    boxWindow.setHeight(format(dim[1]) + "em");
    boxWindow.setResizable(false);

    HorizontalLayout toolBar = new HorizontalLayout();
    toolBar.setSpacing(true);

    Button btnYes = new Button(this.app.getMessageLocale(AppMessages.btnYes));
    btnYes.setWidth(ButtonWidth);
    btnYes.addClickListener(new ClickListener() {
      private static final long serialVersionUID = 8715134731331198001L;

      @Override
      public void buttonClick(ClickEvent event) {
        setResponse(true);
        removeWindow();
      }
    });

    Button btnNot = new Button(this.app.getMessageLocale(AppMessages.btnNot));
    btnNot.setWidth(ButtonWidth);
    btnNot.focus();
    btnNot.addClickListener(new ClickListener() {
      private static final long serialVersionUID = 8715134731331198001L;

      @Override
      public void buttonClick(ClickEvent event) {
        setResponse(false);
        removeWindow();
      }
    });

    toolBar.addComponent(btnYes);
    toolBar.addComponent(btnNot);

    messageLayout.addComponent(message);
    messageLayout.setComponentAlignment(message, Alignment.MIDDLE_CENTER);
    messageLayout.addComponent(toolBar);
    messageLayout.setComponentAlignment(toolBar, Alignment.MIDDLE_CENTER);
    messageLayout.setSizeFull();

    boxWindow.setContent(messageLayout);
    setWindow(boxWindow);
  }

  public boolean isConfirmed() {
    return this.response;
  }

  public void setResponse(boolean response) {
    this.response = response;
  }

  private void setWindow(Window window) {
    boxWindow = window;
    if (boxWindow.getParent() == null) {
      UI.getCurrent().addWindow(boxWindow);
      boxWindow.center();
    }
  }

  private void removeWindow() {
    UI.getCurrent().removeWindow(boxWindow);
  }

  @Override
  public void windowClose(CloseEvent e) {
    try {
      listener.onClose(this);
    } catch (Exception ex) {
      Notification.show("Error:", ex.getMessage(), Notification.Type.ERROR_MESSAGE);
    }
  }

  protected double[] getDialogDimensions(String _message, int style) {
    // Based on Reindeer style:
    double chrW = 0.5d;
    double chrH = 1.5d;
    double length = chrW * _message.length();
    double rows = Math.ceil(length / MAX_WIDTH);
    // Estimate extra lines
    if (style == CONTENT_TEXT_WITH_NEWLINES) {
      rows += count("\n", _message);
    }
    // Obey maximum size
    double width = Math.min(MAX_WIDTH, length);
    double height = Math.ceil(Math.min(MAX_HEIGHT, rows * chrH));
    // Obey the minimum size
    width = Math.max(width, MIN_WIDTH);
    height = Math.max(height, MIN_HEIGHT);
    // Based on Reindeer style:
    double btnHeight = 2.5d;
    double vmargin = 8d;
    double hmargin = 10d;
    double[] res = new double[] { width + hmargin, height + btnHeight + vmargin };

    return res;
  }

  private static int count(final String needle, final String haystack) {
    int count = 0;
    int pos = -1;
    while ((pos = haystack.indexOf(needle, pos + 1)) >= 0) {
      count++;
    }
    return count;
  }

  private String format(double n) {
    NumberFormat nf = NumberFormat.getNumberInstance(Locale.ENGLISH);
    nf.setMaximumFractionDigits(1);
    nf.setGroupingUsed(false);
    return nf.format(n);
  }
}
